# alerting:
#   # -- Name of the alert channel as it is defined in the alertforwardings-domain-deployment. The default value is based on `grafanaProvisioningHelpers.domain`.
#   channel: ""
#   # -- Where to read alert JSONs from
#   paths:
#   - "alerts"
# dashboards:
#   # -- Enable provisioned dashboards
#   enabled: true
#   # -- Where to read dashboard JSONs from
#   paths:
#   - "dashboards"


kube-prometheus-stack:

  alertmanager:
    enabled: false
    ingress:
      enabled: false

  grafana:
    enabled: true
    defaultDashboardsEnabled: true
    defaultDashboardsTimezone: Europe/Berlin
    adminPassword: admin
    ingress:
      enabled: false
    sidecar:
      dashboards:
        enabled: true
        label: grafana_dashboard
        labelValue: "1"
        searchNamespace: monitoring
        provider:
          allowUiUpdates: false

  prometheusOperator:
    enabled: true
    # namespaces: {}
    # # releaseNamespace: true
    # # additional:
    # # - kube-system

    # ## Namespaces not to scope the interaction of the Prometheus Operator (deny list).
    # ##
    # denyNamespaces: []

    # ## Filter namespaces to look for prometheus-operator custom resources
    # ##
    # alertmanagerInstanceNamespaces: []
    # alertmanagerConfigNamespaces: []
    # prometheusInstanceNamespaces: []
    # thanosRulerInstanceNamespaces: []

  prometheus:
    enabled: true
    prometheusSpec:
      ## If true, a nil or {} value for prometheus.prometheusSpec.serviceMonitorSelector will cause the
      ## prometheus resource to be created with selectors based on values in the helm deployment,
      ## which will also match the servicemonitors created
      ##
      serviceMonitorSelectorNilUsesHelmValues: false

      ## ServiceMonitors to be selected for target discovery.
      ## If {}, select all ServiceMonitors
      ##

      # serviceMonitorSelector: {}
      serviceMonitorSelector:
        matchLabels:
          prometheus: somelabel


      serviceMonitorNamespaceSelector: {}
      # serviceMonitorNamespaceSelector:
      #  matchLabels:
      #    name: argocd








      # serviceMonitorSelectorNilUsesHelmValues: false
      # ## Namespaces to be selected for ServiceMonitor discovery.
      # ##
      # serviceMonitorNamespaceSelector: {}
      # ## Example which selects ServiceMonitors in namespaces with label "prometheus" set to "somelabel"
      # # serviceMonitorNamespaceSelector:
      # #   matchLabels:
      # #     prometheus: somelabel
      # serviceMonitorNamespaceSelector:
      #   matchLabels:
      #     argocd: "true"

      # serviceMonitorNamespaceSelector: {}
        # matchLabels:
        #   prometheus: somelabel

      # serviceMonitorSelector: {}
      ## Example which selects ServiceMonitors with label "prometheus" set to "somelabel"
      # serviceMonitorSelector:
      #   matchLabels:
      #     prometheus: somelabel


      # additionalScrapeConfigs:
    #   - job_name: 'fritzbox_exporter_fd'
    #     static_configs:
    #     - targets: ['10.10.10.100:10120']

    #   additionalScrapeConfigsSecret: 
    #     enabled: true
    #     name: additional-scrape-configs
    #     key: prometheus-additional.yaml



  thanosRuler:
    enabled: false


  # Scraping

  kubeApiServer:
    enabled: true
 
  kubelet:
    enabled: true
    
  kubeControllerManager:
    enabled: true

  coreDns:
    enabled: true
  
  kubeDns:
    enabled: false
    
  kubeEtcd:
    enabled: true

  kubeScheduler:
    enabled: true

  kubeProxy:
    enabled: true

  kubeStateMetrics:
    enabled: true

  nodeExporter:
    enabled: true
    operatingSystems:
      linux:
        enabled: true
      darwin:
        enabled: false
